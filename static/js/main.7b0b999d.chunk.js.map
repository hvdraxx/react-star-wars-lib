{"version":3,"sources":["components/SearchSection/Heading/Heading.tsx","components/SearchSection/SearchForm/FormInput/FormInput.tsx","components/SearchSection/SearchForm/FormRadio/RadioButton/RadioButton.tsx","components/SearchSection/SearchForm/FormRadio/FormRadio.tsx","components/SearchSection/SearchForm/FormButton/FormButton.tsx","components/SearchSection/SearchForm/SearchForm.tsx","components/SearchSection/SearchSection.tsx","components/ResultsSection/ResultsList/ListItem/ListItem.tsx","components/ResultsSection/ResultsList/ResultsList.tsx","components/ResultsSection/ResultsSection.tsx","components/DataSection/DataList/DataListItem/DataListItem.tsx","components/DataSection/DataList/DataList.tsx","components/DataSection/DataSection.tsx","components/Modal/ModalText.tsx","components/Modal/Modal.tsx","App.tsx","index.tsx"],"names":["Wrapper","styled","div","Star","h1","Wars","Library","h2","Heading","TransitionGroup","component","appear","in","CSSTransition","classNames","timeout","Input","input","FormInput","handleValue","value","type","placeholder","id","autoComplete","onChange","event","target","Radio","Label","label","RadioButton","checked","handleOption","name","defaultChecked","htmlFor","onClick","FormRadio","Button","button","FormButton","Form","form","h3","SearchForm","props","useState","setValue","option","setOption","handleSubmit","a","preventDefault","setResponseStatus","triggerModal","url","fetch","response","status","setSelectedItem","triggerResults","triggerItem","json","result","data","results","setResponse","length","onSubmit","SearchSection","Item","li","ListItem","item","selectItem","List","ul","ResultsList","items","map","list","document","querySelectorAll","Object","values","section","ResultsSection","transition","Name","span","Value","DataListItem","property","DataList","entries","key","Array","isArray","includes","defineProperty","replace","getOwnPropertyDescriptor","DataSection","p","ErrorWrapper","Again","Text","Overlay","Modal","App","responseStatus","selectedItem","showModal","toggleModal","showResults","toggleResults","showItem","toggleItem","showOrNot","clear","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7b0b999d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n  & > * {\r\n    font-family: \"Star Jedi\", sans-serif;\r\n    text-align: center;\r\n    user-select: none;\r\n  }\r\n\r\n  @media all and (max-width: 1024px) {\r\n    display: flex;\r\n    align-items: flex-end;\r\n    margin-bottom: 40px;\r\n  }\r\n\r\n  @media all and (max-width: 425px) {\r\n    margin-bottom: 15px;\r\n  }\r\n`\r\nconst Star = styled.h1`\r\n  line-height: 0.7;\r\n  font-size: 180px;\r\n  transform-style: preserve-3d;\r\n  transform: perspective(8cm) rotateX(40deg) rotateY(0);\r\n\r\n  @media all and (min-width: 2000px) {\r\n    line-height: 0.75;\r\n    font-size: 8vw;\r\n  }\r\n\r\n  @media all and (max-width: 1440px) {\r\n    line-height: 6.4vw;\r\n    font-size: 9.5vw;\r\n  }\r\n\r\n  @media all and (max-width: 1024px) {\r\n    margin-right: 0.8vw;\r\n    line-height: 1;\r\n  }\r\n`\r\nconst Wars = styled(Star)`\r\n  line-height: 0.35;\r\n\r\n  @media all and (max-width: 1024px) {\r\n    margin-right: 18px;\r\n    line-height: 1;\r\n  }\r\n\r\n  @media all and (max-width: 425px) {\r\n    margin-right: 10px;\r\n  }\r\n`\r\nconst Library = styled.h2`\r\n  font-size: 40px;\r\n  letter-spacing: 8px;\r\n  color: var(--white);\r\n\r\n  @media all and (max-width: 1440px) {\r\n    font-size: 1.8vw;\r\n  }\r\n\r\n  @media all and (max-width: 1024px) {\r\n    order: 1;\r\n    font-size: 3.8vw;\r\n    line-height: 1.5;\r\n  }\r\n\r\n  @media all and (max-width: 768px) {\r\n    line-height: 1.6;\r\n    letter-spacing: 5px;\r\n  }\r\n`\r\n\r\nexport const Heading = () => {\r\n  return(\r\n    <TransitionGroup component={null} appear in>\r\n      {true && (\r\n        <CSSTransition classNames=\"heading\" timeout={1000} >\r\n          <Wrapper>\r\n            <Star>star</Star>\r\n            <Library>library</Library>\r\n            <Wars>wars</Wars>\r\n          </Wrapper>\r\n        </CSSTransition>\r\n      )}\r\n    </TransitionGroup>\r\n  )\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { FormInputProps } from '../../../../types/types';\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  padding: 0 25px;\r\n\r\n  @media all and (max-width: 1024px) {\r\n    padding: 0;\r\n  }\r\n`\r\nconst Input = styled.input`\r\n  width: 100%;\r\n  border: 2px solid var(--white);\r\n  margin-bottom: 20px;\r\n  padding: 10px;\r\n  color: var(--white);\r\n  background-color: transparent;\r\n  transition: 0.3s;\r\n\r\n  &::placeholder {\r\n    font-family: 'Open sans', serif;\r\n    color: rgba(255, 255, 255, 0.6);\r\n    transition: 0.3s;\r\n  }\r\n\r\n  &:focus {\r\n    border-color: var(--white);\r\n    outline: none;\r\n    box-shadow: 0 0 10px white;\r\n  }\r\n\r\n  &:focus&::placeholder {\r\n    color: var(--white);\r\n  }\r\n\r\n  &:hover {\r\n    box-shadow: 0 0 10px white;\r\n  }\r\n\r\n  @media all and (max-width: 425px) {\r\n    margin-bottom: 15px;\r\n    padding: 7px;\r\n    font-size: 16px;\r\n  }\r\n`\r\n\r\n\r\n\r\nexport const FormInput = ({handleValue, value}: FormInputProps) => {\r\n\r\n  const valueHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    handleValue(event.target.value)\r\n  }\r\n\r\n  return(\r\n    <Wrapper>\r\n      <Input\r\n      type=\"text\"\r\n      placeholder=\"e. g. Skywalker\"\r\n      id=\"inputSearch\"\r\n      autoComplete=\"off\"\r\n      onChange={valueHandler}\r\n      value={value}\r\n      />\r\n    </Wrapper>\r\n  )\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { FormRadioProps } from '../../../../../types/types';\r\n\r\nconst Radio = styled.input`\r\n  display: none;\r\n\r\n  &:checked ~ * {\r\n    color: var(--white);\r\n    text-decoration: underline;\r\n  }\r\n`\r\nconst Label = styled.label`\r\n  font-size: 24px;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    color: var(--white);\r\n    text-decoration: underline;\r\n  }\r\n\r\n  &:focus {\r\n    color: var(--white);\r\n    text-decoration: underline;\r\n  }\r\n\r\n  @media all and (max-width: 1440px) {\r\n    font-size: 1.6vw;\r\n  }\r\n\r\n  @media all and (max-width: 1024px) {\r\n    font-size: 2.5vw;\r\n  }\r\n\r\n  @media all and (max-width: 425px) {\r\n    font-size: 14px;\r\n  }\r\n`\r\n\r\nexport const RadioButton = ({value, checked, handleOption}: FormRadioProps) => {\r\n  return(\r\n    <div>\r\n      <Radio type='radio' \r\n             name='option' \r\n             id={value}\r\n             defaultChecked={checked}/>\r\n\r\n      <Label htmlFor={value} onClick={() => {handleOption(value)}}>\r\n        {value}\r\n      </Label>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport { RadioButton } from './RadioButton/RadioButton';\r\nimport styled from 'styled-components';\r\nimport { HandleOptionProps } from '../../../../types/types';\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  padding: 0 120px;\r\n  margin-bottom: 30px;\r\n\r\n  @media all and (max-width: 1440px) {\r\n    padding: 0 25px;\r\n  }\r\n\r\n  @media all and (max-width: 1024px) {\r\n    padding: 0 75px;\r\n    margin-bottom: 1.2vw;\r\n  }\r\n\r\n  @media all and (max-width: 425px) {\r\n    padding: 0 25px;\r\n    margin-bottom: 8px;\r\n  }\r\n`\r\n\r\nexport const FormRadio = ({handleOption}: HandleOptionProps) => {\r\n  return(\r\n    <Wrapper>\r\n      <RadioButton value='people' handleOption={handleOption} checked/>\r\n      <RadioButton value='planets' handleOption={handleOption}/>\r\n      <RadioButton value='starships' handleOption={handleOption}/>\r\n    </Wrapper>\r\n  )\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  padding: 0 25px;\r\n\r\n  @media all and (max-width: 1024px) {\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n`\r\nconst Button = styled.button`\r\n  width: 100%;\r\n  border: 2px solid rgba(255,232,31, 0.2);\r\n  padding: 2px;\r\n  font-family: \"Star Jedi\";\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  letter-spacing: 2px;\r\n  color: var(--black);\r\n  background-color: rgba(255,232,31, 0.8);\r\n  cursor: pointer;\r\n  transition: 0.3s;\r\n\r\n  &:focus {\r\n    outline: none;\r\n    box-shadow: 0 0 10px rgba(255,232,31, 0.6);\r\n  }\r\n\r\n  &:hover {\r\n    background-color: var(--yellow);\r\n    box-shadow: 0 0 10px rgba(255,232,31, 0.6);\r\n  }\r\n\r\n  @media all and (max-width: 1024px) {\r\n    width: 200px;\r\n  }\r\n\r\n  @media all and (max-width: 425px) {\r\n    width: 160px;\r\n    padding: 0;\r\n    font-size: 18px;\r\n  }\r\n`\r\n\r\nexport const FormButton = () => {\r\n  return(\r\n    <Wrapper>\r\n      <Button type='submit'>\r\n        Find\r\n      </Button>\r\n    </Wrapper>\r\n  )\r\n}","import React, { useState } from 'react';\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport { FormInput } from './FormInput/FormInput';\r\nimport { FormRadio } from './FormRadio/FormRadio';\r\nimport { FormButton } from './FormButton/FormButton';\r\nimport styled from 'styled-components';\r\nimport { SearchProps } from '../../../types/types';\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n`\r\nconst Heading = styled.h3`\r\n  font-size: 30px;\r\n  font-weight: bold;\r\n  word-spacing: 3px;\r\n  letter-spacing: 1px;\r\n  text-align: center;\r\n  margin-bottom: 15px;\r\n\r\n  @media all and (max-width: 1200px) {\r\n    font-size: 2.3vw;\r\n  }\r\n\r\n  @media all and (max-width: 1024px) {\r\n    margin-bottom: 2vw;\r\n    font-size: 3vw;\r\n    text-transform: uppercase;\r\n  }\r\n\r\n  @media all and (max-width: 425px) {\r\n    font-size: 13px;\r\n  }\r\n`\r\n\r\nexport const SearchForm = (props: SearchProps) => {\r\n  const [value, setValue] = useState<string>('')\r\n  const [option, setOption] = useState<string>('people')\r\n\r\n  const handleSubmit = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    if (value === '') {\r\n      props.setResponseStatus('empty');\r\n      props.triggerModal();\r\n    }\r\n    else {\r\n      let url = `https://swapi.dev/api/${option}/?search=${value}`;\r\n      let response = await fetch(url);\r\n      if (response.status !== 200) {\r\n        props.setResponseStatus(response.status);\r\n        props.triggerModal();\r\n        props.setSelectedItem({});\r\n        props.triggerResults(false);\r\n        props.triggerItem(false);\r\n      }\r\n      else {\r\n        let result = await response.json();\r\n        const data = result.results;\r\n\r\n        props.setResponse(data);\r\n        props.setResponseStatus(response.status);\r\n        props.triggerResults(true);\r\n\r\n        if (response.status === 200 && data.length === 0) {\r\n          props.setResponseStatus('notFound')\r\n          props.triggerModal();\r\n          props.setSelectedItem({});\r\n          props.triggerResults(false);\r\n          props.triggerItem(false);\r\n        }\r\n      }\r\n    }\r\n    setValue('');\r\n  }\r\n \r\n  return (\r\n    <TransitionGroup component={null} appear in>\r\n      {true && (\r\n        <CSSTransition classNames=\"form\" timeout={1000} >\r\n          <Form onSubmit={handleSubmit}>\r\n            <Heading>\r\n              what would you like to find?\r\n            </Heading>\r\n            <FormRadio handleOption={(option: string) => {setOption(option)}}/>\r\n            <FormInput \r\n              handleValue={(value: string) => {setValue(value)}}\r\n              value={value}\r\n            />\r\n            <FormButton />\r\n          </Form>\r\n        </CSSTransition>\r\n      )}\r\n  </TransitionGroup>\r\n  )\r\n}","import React from 'react';\r\nimport { Heading } from './Heading/Heading';\r\nimport { SearchForm } from './SearchForm/SearchForm';\r\nimport styled from 'styled-components';\r\nimport { SearchProps } from '../../types/types';\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  width: 38%;\r\n\r\n  @media all and (max-width: 1024px) {\r\n    grid-column: 1 / 3;\r\n    grid-row: 1 / 2;\r\n    justify-content: start;\r\n    width: 100%;\r\n    margin-bottom: 25px;\r\n    padding: 0 25px; \r\n  }\r\n  \r\n  @media all and (max-width: 425px) {\r\n    padding: 0 10px;\r\n  }\r\n`\r\n\r\nexport const SearchSection = (props: SearchProps) => {\r\n  return(\r\n    <Wrapper>\r\n      <Heading />\r\n        <SearchForm \r\n          setResponse={props.setResponse}\r\n          setResponseStatus={props.setResponseStatus}\r\n          setSelectedItem={props.setSelectedItem}\r\n          triggerModal={props.triggerModal}\r\n          triggerResults={props.triggerResults}\r\n          triggerItem={props.triggerItem}/>\r\n    </Wrapper>\r\n  )\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { ResultsItemProps } from '../../../../types/types';\r\n\r\nconst Item = styled.li`\r\n  &:not(:last-child) {\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  @media all and (max-width: 1024px) {\r\n    &:not(:last-child) {\r\n      margin-bottom: 18px;\r\n    }\r\n  }\r\n`\r\nconst Label = styled.label`\r\n  display: block;\r\n  padding: 10px 0;\r\n  border: 1px solid var(--yellow);\r\n  text-align: center;\r\n  background-color: transparent;\r\n  cursor: pointer;\r\n  transition: 0.2s;\r\n\r\n  &:hover {\r\n    border-color: var(--white);\r\n    color: var(--white);\r\n  }\r\n\r\n  @media all and (max-width: 1200px) {\r\n    font-size: 1.6vw;\r\n  }\r\n\r\n  @media all and (max-width: 768px) {\r\n    font-size: 14px;\r\n  }\r\n\r\n  @media all and (max-width: 425px) {\r\n    padding: 4px 6px;\r\n  }\r\n`\r\nconst Radio = styled.input`\r\n  display: none;\r\n\r\n  &:checked ~ * {\r\n    outline: none;\r\n    border-color: var(--white);\r\n    border-radius: none;\r\n    background-color: var(--white);\r\n    color: var(--black);\r\n  }\r\n`\r\n\r\nexport const ListItem = ({item, selectItem, triggerItem}: ResultsItemProps) => {\r\n  return(\r\n    <Item>\r\n      <Radio \r\n        type=\"radio\"\r\n        name='item'\r\n        id={item.name}\r\n      />\r\n\r\n      <Label \r\n        htmlFor={item.name}\r\n        onClick={ () => {\r\n          selectItem(item);\r\n          triggerItem(true);\r\n      }}>\r\n          \r\n          {item.name}\r\n\r\n      </Label>\r\n    </Item>\r\n  )\r\n}","/* eslint-disable array-callback-return */\r\nimport React from 'react';\r\nimport { ListItem } from './ListItem/ListItem';\r\nimport styled from 'styled-components';\r\nimport { ResultsListProps } from '../../../types/types';\r\n\r\nconst List = styled.ul`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  height: 100%;\r\n  padding: 0 50px;\r\n\r\n  @media all and (max-width: 1440px) {\r\n    padding: 0 25px;\r\n  }\r\n\r\n  @media all and (max-width: 1024px) {\r\n    height: auto;\r\n    padding: 0 12.5px 0 25px;\r\n  }\r\n\r\n  @media all and (max-width: 425px) {\r\n    padding: 0 5px 0 10px;\r\n  }\r\n`\r\n\r\nexport const ResultsList = ({items, selectItem, triggerItem}: ResultsListProps) => {\r\n\r\n  const results = items!.map((item) => \r\n    <ListItem key={item.name}\r\n              item={item}\r\n              selectItem={selectItem}\r\n              triggerItem={triggerItem}\r\n    />\r\n  )\r\n\r\n  // remove checked attribute \r\n  const list: NodeListOf<HTMLInputElement> = document.querySelectorAll('input[name=item]')\r\n  Object.values(list).map((item) => {\r\n    if (item.checked) item.checked = false\r\n  })\r\n\r\n  return (\r\n    <List>\r\n      {results}\r\n    </List>\r\n  )\r\n}","import React from 'react';\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport { ResultsList } from './ResultsList/ResultsList';\r\nimport styled from 'styled-components';\r\nimport { ResultsSectionProps } from '../../types/types';\r\n\r\nconst Wrapper = styled.section`\r\n  width: 31%;\r\n\r\n  @media all and (max-width: 1024px) {\r\n    grid-column: 1 / 2;\r\n    grid-row: 2 / 3;\r\n    width: 100%;\r\n    heigh: 100vh;\r\n  }\r\n`\r\n\r\nexport const ResultsSection = ({transition, items, selectItem, triggerItem}: ResultsSectionProps) => {\r\n  return (\r\n    <Wrapper>\r\n        <TransitionGroup component={null}>\r\n          {transition && (\r\n            <CSSTransition classNames=\"results\" timeout={500}>\r\n              <ResultsList items={items} selectItem={selectItem} triggerItem={triggerItem}/>\r\n            </CSSTransition>\r\n          )}\r\n        </TransitionGroup>\r\n    </Wrapper>\r\n  )\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { DataItemProps } from '../../../../types/types';\r\n\r\nconst ListItem = styled.li`\r\n  padding: 8px;\r\n  border: 1px solid var(--white);\r\n\r\n  &:not(:last-child) {\r\n    margin-bottom: 18px;\r\n  }\r\n\r\n  @media all and (max-width: 1200px) {\r\n    font-size: 1.4vw;\r\n  }\r\n\r\n  @media all and (max-width: 768px) {\r\n    font-size: 14px;\r\n  }\r\n\r\n  @media all and (max-width: 425px) {\r\n    padding: 4px 6px;\r\n  }\r\n`\r\nconst Name = styled.span`\r\n  @media all and (max-width: 1200px) {\r\n    font-size: 1.6vw;\r\n  }\r\n\r\n  @media all and (max-width: 768px) {\r\n    font-size: 14px;\r\n  }\r\n`\r\nconst Value = styled(Name)`\r\n  color: var(--white)\r\n`\r\n\r\nexport const DataListItem = ({property, value}: DataItemProps) => {\r\n  return(\r\n    <ListItem>\r\n      <Name>{property}</Name>: <Value>{value}</Value>\r\n    </ListItem>\r\n  )\r\n}","/* eslint-disable array-callback-return */\r\nimport React from 'react';\r\nimport { DataListItem } from './DataListItem/DataListItem';\r\nimport styled from 'styled-components';\r\nimport { DataListProps } from '../../../types/types';\r\n\r\nconst List = styled.ul`\r\n  width: 100%;\r\n  padding: 0 50px;\r\n\r\n  @media all and (max-width: 1440px) {\r\n    padding: 0 25px;\r\n  }\r\n\r\n  @media all and (max-width: 1024px) {\r\n    height: auto;\r\n    padding: 0 25px 0 12.5px;\r\n  }\r\n\r\n  @media all and (max-width: 425px) {\r\n    padding: 0 10px 0 5px;\r\n  }\r\n`\r\n\r\nexport const DataList= ({item}: DataListProps) => {\r\n  \r\n  // throw and rename specific keys\r\n  Object.entries(item).map(([key, value]) => {\r\n      if (value === '')\r\n        return delete item[key];\r\n      if (key === 'url' || key === 'created' || key === 'edited' || key === 'homeworld')\r\n        return delete item[key];\r\n      if (Array.isArray(value))\r\n        return delete item[key];\r\n\r\n      if (key.includes('_')) {\r\n        Object.defineProperty(item, key.replace('_', ' '), Object.getOwnPropertyDescriptor(item, key)!);\r\n        delete item[key];\r\n      }\r\n    })\r\n\r\n  const items = Object.entries(item).map(([key, value]) => {\r\n      return (\r\n        <DataListItem key={key} property={key} value={value} />\r\n      )\r\n  });\r\n\r\n  return(\r\n    <List>\r\n      {items}\r\n    </List>\r\n  )\r\n}","import React from 'react';\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport { DataList } from './DataList/DataList';\r\nimport styled from 'styled-components';\r\nimport { DataSectionProps } from '../../types/types';\r\n\r\nconst Wrapper = styled.section`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 31%;\r\n\r\n  @media all and (max-width: 1024px) {\r\n    grid-column: 2 / 3;\r\n    grid-row: 2 / 3;\r\n    width: 100%;\r\n    align-items: start;\r\n  }\r\n`\r\n\r\nexport const DataSection = ({transition, item}: DataSectionProps) => {\r\n  return(\r\n    <Wrapper>\r\n      <TransitionGroup component={null}>\r\n        {transition && (\r\n          <CSSTransition classNames=\"data\" timeout={500}>\r\n            {<DataList item={item}/>}\r\n          </CSSTransition>\r\n        )}\r\n      </TransitionGroup>\r\n    </Wrapper>\r\n  )\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { ModalTextProps } from '../../types/types';\r\n\r\nconst Wrapper = styled.p`\r\n  margin-bottom: 25px;\r\n  color: var(--black);\r\n  font-size: 26px;\r\n  font-weight: bold;\r\n  word-spacing: 3px;\r\n\r\n  @media all and (max-width: 767px) {\r\n    font-size: 20px;\r\n    text-align: center;\r\n  }\r\n`\r\n\r\nconst ErrorWrapper = styled.p`\r\n  text-align: center;\r\n\r\n  & p {\r\n    color: var(--black);\r\n    font-size: 26px;\r\n    font-weight: bold;\r\n    word-spacing: 3px;\r\n  }\r\n`\r\n\r\nconst Again = styled(Wrapper)`\r\n  margin-bottom: 0;\r\n  font-family: 'Star Jedi';\r\n  font-size: 30px !important;\r\n  line-height: 1;\r\n`\r\n\r\nexport const Text = ({ status }: ModalTextProps) => {\r\n  const chooseText = () => {\r\n    if (typeof status !== 'string') \r\n    return (\r\n      <ErrorWrapper>\r\n        <p>Something went wrong.</p>\r\n        <Again>Try again</Again>\r\n      </ErrorWrapper>\r\n    )\r\n    else {\r\n      if (status === 'empty') return 'Input field should not be empty'\r\n      if (status === 'notFound') return 'Nothing Found';\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Wrapper>{chooseText()}</Wrapper>\r\n  )\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { ModalProps } from '../../types/types';\r\nimport { Text } from './ModalText';\r\n\r\nconst Overlay = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background-color: rgba(0, 0, 0, 0.9);\r\n  z-index: 9;\r\n`\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 30px 100px;\r\n  background-color: var(--yellow);\r\n  overflow: hidden;\r\n\r\n  @media all and (max-width: 767px) {\r\n    width: 90%;\r\n    height: auto;\r\n    padding: 30px 25px;\r\n  }\r\n`\r\n\r\nconst Button = styled.button`\r\n  padding: 10px 35px;\r\n  border: 1px solid var(--black);\r\n  font-family: 'Star Jedi';\r\n  letter-spacing: 4px;\r\n  background-color: var(--black);\r\n  cursor: pointer;\r\n  transition: 0.3s;\r\n\r\n  &:hover {\r\n    color: var(--black);\r\n    background-color: var(--white);\r\n    box-shadow: 0 0 7px 0 var(--black);\r\n  }\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`\r\n\r\nexport const Modal = ({status, triggerModal}: ModalProps) => {\r\n  return(\r\n    <Overlay>\r\n      <Wrapper>\r\n        <Text status={status}/>\r\n        <Button onClick={triggerModal}>\r\n          close\r\n        </Button>\r\n      </Wrapper>\r\n    </Overlay>\r\n  )\r\n}","import React, { useState } from 'react';\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport { SearchSection } from './components/SearchSection/SearchSection';\nimport { ResultsSection } from './components/ResultsSection/ResultsSection';\nimport { DataSection } from './components/DataSection/DataSection';\nimport { Modal } from './components/Modal/Modal';\nimport styled from 'styled-components';\nimport { Data } from './types/types';\n\nconst Wrapper = styled.section`\n  display: flex;\n  width: 100%;\n  height: auto;\n  min-height: 100vh;\n  padding: 25px 0;\n\n  @media all and (max-width: 1440px) {\n    padding: 25px 0;\n  }\n\n  @media all and (max-width: 1024px) {\n    display: grid;\n    grid-template-columns: 50% 50%;\n    grid-template-rows: auto auto;\n    height: unset;\n    min-height: unset;\n  }\n\n  @media all and (max-width: 425px) {\n    padding: 10px 0;\n  }\n`\n\nexport const App = () => {\n  const [response, setResponse] = useState<Data[]>([]);\n  const [responseStatus, setResponseStatus] = useState<string | number>(0)\n  const [selectedItem, setSelectedItem] = useState<Data>({});\n  const [showModal, toggleModal] = useState<boolean>(false);\n  const [showResults, toggleResults] = useState<boolean>(false);\n  const [showItem, toggleItem] = useState<boolean>(false);\n\n  return(\n    <Wrapper>\n\n      <TransitionGroup component={null}>\n        {showModal && (\n          <CSSTransition classNames=\"modal\" timeout={400}>\n            <Modal status={responseStatus} \n                   triggerModal={()=> {toggleModal(!showModal)}}/> \n          </CSSTransition>\n        )}\n      </TransitionGroup>\n\n      <ResultsSection \n        items={response}\n        selectItem={(item) => {setSelectedItem(item)}}\n        triggerItem={(showOrNot) => {toggleItem(showOrNot)}}\n        transition={showResults}\n      />\n\n      <SearchSection \n        setResponse={(data) => {setResponse(data)}}\n        setResponseStatus={(status) => {setResponseStatus(status)}}\n        setSelectedItem={(clear) => {setSelectedItem(clear)}}\n        triggerModal={() => {toggleModal(!showModal)}}\n        triggerResults={(showOrNot) => toggleResults(showOrNot)}\n        triggerItem={(showOrNot) => toggleItem(showOrNot)}\n      />\n\n      <DataSection\n        item={selectedItem}\n        transition={showItem}\n      />\n\n    </Wrapper>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './styles/index.css';\nimport './styles/animations.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}